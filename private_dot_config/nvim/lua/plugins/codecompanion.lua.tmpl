{{ if eq .chezmoi.os "darwin" -}}

return {
 {
   "olimorris/codecompanion.nvim",
   dependencies = {
     "nvim-lua/plenary.nvim",
     "nvim-treesitter/nvim-treesitter",
   },
   config = true,
   opts = {
      strategies = {
        {{ if eq .chezmoi.hostname "GL723J93MH" -}}
        chat = { adapter = 'copilot' },
        inline = { adapter = 'copilot' },
        {{ else -}}
        chat = { adapter = 'ollama' },
        inline = { adapter = 'ollama' },
        {{ end -}}
        adapters = {
           qwencoder = function()
            return require("codecompanion.adapters").extend("ollama", {
              name = "qwencoder", -- Give this adapter a different name to differentiate it from the default ollama adapter
              schema = {
                model = {
                  default = "qwen2.5-coder:7b",
                },
                num_ctx = {
                  default = 16384,
                },
                num_predict = {
                  default = -1,
                },
              },
            })
          end,
          llama31 = function()
            return require("codecompanion.adapters").extend("ollama", {
              name = "llama31", -- Give this adapter a different name to differentiate it from the default ollama adapter
              schema = {
                model = {
                  default = "llama3.1:latest",
                },
                num_ctx = {
                  default = 16384,
                },
                num_predict = {
                  default = -1,
                },
              },
            })
          end,
          Gemini = function()
            return require("codecompanion.adapters").extend("gemini", {
              schema = {
                model = {
                  default = "gemini-2.5-flash-preview-05-20",
                },
              },
              env = {
                api_key = vim.env.GEMINI_API_KEY,
              },
            })
          end,
        },
      },

        prompt_library = {
          ["Go Master"] = {
            strategy = "chat",
            description = "An assistant for Go developers",
            prompts = {
              {
                role = "system",
                content = [[ You are an expert Golang programming assistant with deep knowledge of Go's syntax, best practices, performance optimization, concurrency patterns, and ecosystem. You provide accurate, idiomatic Go code solutions and explanations following these principles:

1. **Code Quality**:
   - Always write clean, efficient, and idiomatic Go code
   - Follow effective Go guidelines (https://golang.org/doc/effective_go.html)
   - Use proper error handling and avoid panics in examples
   - Include relevant context cancellation and timeouts in concurrent code

2. **Explanation Style**:
   - Provide clear explanations of Go-specific concepts
   - Highlight important considerations (zero values, interface satisfaction, etc.)
   - Compare approaches when relevant (channels vs mutexes, etc.)
   - Reference official documentation and notable third-party libraries

3. **Problem Solving**:
   - Break down complex problems into Go-appropriate solutions
   - Suggest multiple approaches when applicable
   - Consider performance characteristics (allocations, goroutine overhead)
   - Address common pitfalls (goroutine leaks, race conditions)

4. **Modern Go Features**:
   - Demonstrate expertise with generics (type parameters)
   - Show awareness of recent Go versions' features
   - Use appropriate standard library packages (context, sync, etc.)

5. **Interaction Style**:
   - Ask clarifying questions when requirements are ambiguous
   - Provide complete runnable examples when possible
   - Offer optimization suggestions for existing code
   - Explain tradeoffs between different implementations


For code examples:

- Use proper formatting with gofmt standards
- Include relevant imports
- Add brief comments for non-obvious logic
- Consider both simple and production-ready versions


You are up-to-date with Go 1.23+ features and the broader Go ecosystem including popular frameworks and tools (Go modules, testing, profiling, etc.). ]],
              },
              {
                role = "user",
                content = "As a Golang master, can you "
              }
            },
          }
        }
      
   } 
 },
}

{{ else if eq .chezmoi.os "linux" -}}

return {
 {
   "olimorris/codecompanion.nvim",
   dependencies = {
     "nvim-lua/plenary.nvim",
     "nvim-treesitter/nvim-treesitter",
   },
   config = true,
   opts = {
      strategies = {
        chat = { adapter = 'Gemini' },
        inline = { adapter = 'Gemini' },
      },
     adapters = {
       Gemini = function()
        return require("codecompanion.adapters").extend("gemini", {
          schema = {
            model = {
              default = "gemini-2.5-flash-preview-05-20",
            },
          },
          env = {
            api_key = vim.env.GEMINI_API_KEY,
          },
        })
      end,
        -- because groq is also openai api compliant
        groq = function()
          return require("codecompanion.adapters").extend("openai", {
            env = {
              api_key = vim.env.GROQ_API_KEY,
            },
            name = "Groq",
            url = "https://api.groq.com/openai/v1/chat/completions",
            schema = {
              model = {
                default = "moonshotai/kimi-k2-instruct",
              },
            },
            max_tokens = {
              default = 8192,
            },
            temperature = {
              default = 1,
            },
          })
        end,     },
   },
 },
}

{{- end -}}
