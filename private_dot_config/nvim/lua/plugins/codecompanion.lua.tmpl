{{ if eq .chezmoi.os "darwin" -}}

return {
 {
   "olimorris/codecompanion.nvim",
   dependencies = {
     "nvim-lua/plenary.nvim",
     "nvim-treesitter/nvim-treesitter",
   },
   config = true,
   opts = {
      strategies = {
        chat = { adapter = 'ollama' },
        inline = { adapter = 'ollama' },
        adapters = {
           qwencoder = function()
            return require("codecompanion.adapters").extend("ollama", {
              name = "qwencoder", -- Give this adapter a different name to differentiate it from the default ollama adapter
              schema = {
                model = {
                  default = "qwen2.5-coder:7b",
                },
                num_ctx = {
                  default = 16384,
                },
                num_predict = {
                  default = -1,
                },
              },
            })
          end,
          llama31 = function()
            return require("codecompanion.adapters").extend("ollama", {
              name = "llama31", -- Give this adapter a different name to differentiate it from the default ollama adapter
              schema = {
                model = {
                  default = "llama3.1:latest",
                },
                num_ctx = {
                  default = 16384,
                },
                num_predict = {
                  default = -1,
                },
              },
            })
          end,
          Gemini = function()
    				return require("codecompanion.adapters").extend("gemini", {
    					schema = {
    						model = {
    							default = "gemini-2.0-flash-exp",
    						},
    					},
    					env = {
    						api_key = vim.env.GEMINI_API_KEY,
    					},
    				})
    			end,
        },
      }
   } 
 },
}

{{ else if eq .chezmoi.os "linux" -}}

return {
 {
   "olimorris/codecompanion.nvim",
   dependencies = {
     "nvim-lua/plenary.nvim",
     "nvim-treesitter/nvim-treesitter",
   },
   config = true,
   opts = {
      strategies = {
        chat = { adapter = 'Groq' },
        inline = { adapter = 'Groq' },
      },
     adapters = {
       Groq = function()
          -- this is my personal fix to detect the config
          local groq_api_token = vim.env.GROQ_API_KEY
          if not groq_api_token then
            error("Environment variable GROQ_API_KEY must be set.")
          end
          return require("codecompanion.adapters").extend("openai_compatible", {
           env = {
             url = "https://api.groq.com/openai/",
             api_key = groq_api_token,
             chat_url = "/v1/chat/completions", -- optional: default value, override if different
             models_endpoint = "/v1/models", -- optional: attaches to the end of the URL to form the endpoint to retrieve models
           },
           schema = {
             model = {
               default = "qwen-2.5-coder-32b",  -- define llm model to be used
             },
             temperature = {
               order = 2,
               mapping = "parameters",
               type = "number",
               optional = true,
               default = 0.8,
               desc = "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
               validate = function(n)
                 return n >= 0 and n <= 2, "Must be between 0 and 2"
               end,
             },
             max_completion_tokens = {
               order = 3,
               mapping = "parameters",
               type = "integer",
               optional = true,
               default = nil,
               desc = "An upper bound for the number of tokens that can be generated for a completion.",
               validate = function(n)
                 return n > 0, "Must be greater than 0"
               end,
             },
             stop = {
               order = 4,
               mapping = "parameters",
               type = "string",
               optional = true,
               default = nil,
               desc = "Sets the stop sequences to use. When this pattern is encountered the LLM will stop generating text and return. Multiple stop patterns may be set by specifying multiple separate stop parameters in a modelfile.",
               validate = function(s)
                 return s:len() > 0, "Cannot be an empty string"
               end,
             },
             logit_bias = {
               order = 5,
               mapping = "parameters",
               type = "map",
               optional = true,
               default = nil,
               desc = "Modify the likelihood of specified tokens appearing in the completion. Maps tokens (specified by their token ID) to an associated bias value from -100 to 100. Use https://platform.openai.com/tokenizer to find token IDs.",
               subtype_key = {
                 type = "integer",
               },
               subtype = {
                 type = "integer",
                 validate = function(n)
                   return n >= -100 and n <= 100, "Must be between -100 and 100"
                 end,
               },
             },
           },
         })
       end,
       Gemini = function()
				return require("codecompanion.adapters").extend("gemini", {
					schema = {
						model = {
							default = "gemini-2.0-flash-exp",
						},
					},
					env = {
						api_key = vim.env.GEMINI_API_KEY,
					},
				})
			end,
     },
   },
 },
}

{{- end -}}
